@using System.Linq.Expressions
@typeparam TData


@code {
    private Func<TData, object>? compiledExpression;
    private Expression? lastCompiledExpression;
    private RenderFragment? headerTemplate;
    private RenderFragment<TData>? cellTemplate;

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public string? Format { get; set; }

    [CascadingParameter]
    private Grid<TData>? OwnerGrid { get; set; }

    [Parameter]
    public Expression<Func<TData, object>>? Field { get; set; }

    [Parameter]
    public RenderFragment<TData>? Template { get; set; }

    
    // Add the column to the parent Grid component.
    // OnInitialized is called only once in the component lifecycle
    protected override void OnInitialized()
    {
        OwnerGrid?.AddColumn(this);
    }

    protected override void OnParametersSet()
    {
        if (lastCompiledExpression != Field)
        {
            compiledExpression = Field?.Compile();
            lastCompiledExpression = Field;
        }
    }

    internal RenderFragment HeaderTemplate
    {
        get
        {
            return headerTemplate ??= (builder =>
            {
                // Use the provided caption or infer it from the expression
                var caption = Caption;
                if (string.IsNullOrEmpty(caption) && Field != null)
                {
                    caption = GetMemberName(Field);
                }

                builder.OpenElement(0, "th");
                builder.AddContent(1, caption);
                builder.CloseElement();
            });
        }
    }

    internal RenderFragment<TData> CellTemplate
    {
        get
        {
            return cellTemplate ??= (rowData => builder =>
            {
                builder.OpenElement(0, "td");
                if (compiledExpression != null)
                {
                    var value = compiledExpression(rowData);
                    var formattedValue = string.IsNullOrEmpty(Format) ? value?.ToString() : string.Format("{0:" + Format + "}", value);
                    builder.AddContent(1, formattedValue);
                }
                else
                {
                    builder.AddContent(2, Template, rowData);
                }

                builder.CloseElement();
            });
        }
    }

    // Get the Member name from an expression.
    // (customer => customer.Name) returns "Name"
    private static string GetMemberName<T>(Expression<T> expression)
    {
        return expression.Body switch
        {
            MemberExpression m => m.Member.Name,
            UnaryExpression u when u.Operand is MemberExpression m => m.Member.Name,
            _ => throw new NotSupportedException("Expression of type '" + expression.GetType().ToString() + "' is not supported")
        };
    }
}
