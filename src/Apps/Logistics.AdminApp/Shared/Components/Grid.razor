@typeparam TData

<CascadingValue IsFixed="true" Value="this">@Columns</CascadingValue>

<table class="table table-bordered table-hover">
    <thead>
        <tr class="bg-light" style="white-space: nowrap">
            @foreach (var column in columns)
            {
                var columnWidth = column.Width != null ? $"min-width: {column.Width}px; wdith: {column.Width}px" : "";

                <th style="@columnWidth">
                    @column.HeaderTemplate
                </th> 
            }
        </tr>
    </thead>
    
    <tbody>
        @if (DataSource != null)
        {
            foreach (var item in DataSource)
            {
                @* Use @key to help the diff algorithm when updating the collection *@
                <tr @key="item.GetHashCode()" style="vertical-align: middle">
                    @foreach (var column in columns)
                    {
                        <td>
                            @column.CellTemplate(item)
                        </td>
                    }
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="@columns.Count">
                    <span>No records to display</span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private readonly List<Column> columns = new List<Column>();

    [Parameter]
    public IEnumerable<TData>? DataSource { get; set; }

    [Parameter]
    public RenderFragment? Columns { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        StateHasChanged();
    }

    internal void AddColumn(Column column)
    {
        columns.Add(column);
    }
}
