@typeparam TData

<CascadingValue IsFixed="true" Value="this">@Columns</CascadingValue>

<table class="grid table table-bordered table-hover">
    <thead>
        <tr class="grid-header-row bg-light">
            @for (var i = 0; i < columns.Count; i++)
            {
                var column = columns[i];
                var columnWidth = column.Width != null ? $"min-width: {column.Width}px; wdith: {column.Width}px" : "";

                <th style="@columnWidth">
                    @column.HeaderTemplate
                </th> 
            }
        </tr>
    </thead>
    
    <tbody>
        @if (DataSource != null)
        {
            foreach (var item in DataSource)
            {
                <tr @key="item.GetHashCode()" class="grid-body-row">
                    @for (var i = 0; i < columns.Count; i++)
                    {
                        var column = columns[i];
                        var borderCls = UseBorderlessCells && i != columns.Count - 1 ? 
                                        "border-right-none" : "";

                        <td class="@borderCls">
                            @column.CellTemplate(item)
                        </td>
                    }
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="@columns.Count">
                    <span>No records to display</span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private readonly List<Column> columns = new List<Column>();

    [Parameter]
    public IEnumerable<TData>? DataSource { get; set; }

    [Parameter]
    public RenderFragment? Columns { get; set; }

    [Parameter]
    public bool UseBorderlessCells { get; set; } = true;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        StateHasChanged();
    }

    internal void AddColumn(Column column)
    {
        columns.Add(column);
    }
}
