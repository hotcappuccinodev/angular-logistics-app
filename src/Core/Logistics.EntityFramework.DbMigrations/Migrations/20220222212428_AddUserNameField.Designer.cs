// <auto-generated />
using System;
using Logistics.EntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Logistics.EntityFramework.DbMigrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220222212428_AddUserNameField")]
    partial class AddUserNameField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Logistics.Domain.Entities.Cargo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedDispatcherId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedTruckId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Destination")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("PickUpDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PricePerMile")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalTripMiles")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDispatcherId")
                        .IsUnique();

                    b.HasIndex("AssignedTruckId");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DriverId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TruckNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalId")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Cargo", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.User", "AssignedDispatcher")
                        .WithOne()
                        .HasForeignKey("Logistics.Domain.Entities.Cargo", "AssignedDispatcherId");

                    b.HasOne("Logistics.Domain.Entities.Truck", "AssignedTruck")
                        .WithMany("Cargoes")
                        .HasForeignKey("AssignedTruckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedDispatcher");

                    b.Navigation("AssignedTruck");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.User", "Driver")
                        .WithOne()
                        .HasForeignKey("Logistics.Domain.Entities.Truck", "DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.Navigation("Cargoes");
                });
#pragma warning restore 612, 618
        }
    }
}
